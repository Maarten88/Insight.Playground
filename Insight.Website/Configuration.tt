<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
//------------------------------------------------------------------------------
// FileName = Configuration.cs
// Generated at <#= DateTime.Now #>
//
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//    NOTE: Please use the Add a Reference to System.Configuration assembly if 
//          you get compile errors with ConfigurationManager
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;
 
namespace Insight.Website
{
    public static class AppSettings 
	{
		private static string GetSettingOrDefault(string setting, string defaultValue)
		{
			if (string.IsNullOrEmpty(setting))
			{
				return defaultValue;
			}
			else 
			{
				return setting;
			}
		}

		private static TimeSpan GetTimeSpanSettingOrDefault(string setting, TimeSpan defaultValue)
		{
			TimeSpan ts;
			if (!TimeSpan.TryParse(setting, out ts))
			{
				return defaultValue;
			}
			else 
			{
				return ts;
			}
		}

<#
		var configurationFileMap = new ExeConfigurationFileMap();
		configurationFileMap.ExeConfigFilename = this.Host.ResolvePath("Web.config");
		var configuration = ConfigurationManager.OpenMappedExeConfiguration(configurationFileMap, ConfigurationUserLevel.None);
		foreach(string key in configuration.AppSettings.Settings.AllKeys)
		{ 
			if (key.EndsWith("TimeSpan") || key.EndsWith("Duration"))
			{
#>
		public static readonly TimeSpan <#= key.Replace(":", "_").Replace(".", "_") #> = GetTimeSpanSettingOrDefault(ConfigurationManager.AppSettings["<#= key #>"], TimeSpan.Parse("<#= configuration.AppSettings.Settings[key].Value #>"));
<#			}
			else
			{
#>
		public static readonly string <#= key.Replace(":", "_").Replace(".", "_") #> = GetSettingOrDefault(ConfigurationManager.AppSettings["<#= key #>"], "<#= configuration.AppSettings.Settings[key].Value #>");
<#			}
		} #>
	}

    public static class ConnectionStrings 
	{
<#
		var connectionStringCollection = configuration.ConnectionStrings;
		foreach (ConnectionStringSettings cs in connectionStringCollection.ConnectionStrings)
		{
#>
		public static readonly ConnectionStringSettings <#= cs.Name #> = ConfigurationManager.ConnectionStrings["<#= cs.Name #>"];
<#
		}
#>
	}
}
